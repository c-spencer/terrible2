(ns jsbench.test-control)

(declare localStorage Benchmark)

(defn TestCtrl [$scope]

  (set! $scope.top_hz 0)

  (setfn! $scope.deserialise []
    (try
      (set! $scope.tests (or (JSON.parse (localStorage.getItem "tests")) []))
      (catch [exc]
        (set! $scope.tests [])))

    (set! $scope.setup (or (localStorage.getItem "setup") "")
          $scope.teardown (or (localStorage.getItem "teardown") "")))

  (setfn! $scope.serialise []
    (localStorage.setItem "tests"
      (JSON.stringify ($scope.tests.map #({:name %.name :js %.js}))))

    (localStorage.setItem "setup" $scope.setup)
    (localStorage.setItem "teardown" $scope.teardown))

  ($scope.deserialise)

  ($scope.watch "tests" $scope.serialise true)
  ($scope.watch "setup" $scope.serialise)
  ($scope.watch "teardown" $scope.serialise)

  (set! $scope.showSetup (not= $scope.setup "")
        $scope.showTeardown (not= $scope.teardown ""))

  (setfn! $scope.toggle [k] (set! $scope[k] (not $scope[k])))

  (setfn! $scope.addTestCase []
    ($scope.tests.push
      { :name (+ "Test Case " (+ $scope.tests.length 1))
        :js "" }))

  (setfn! $scope.fixed [n s]
    (if (= (type n) "number")
      (n.toFixed s)
      0))

  (setfn! $scope.runTest [test cb]

    (if (not test) (return))

    (set! test.error false
          test.running true
          test.stats null
          $scope.top_hz ($scope.findFastest)
          $scope.testsRunning true)

    (var bench
      (new Benchmark test.name
        { :fn test.js
          :setup $scope.setup
          :teardown $scope.teardown }))

    (bench.on "cycle"
      #($scope.apply
        #(if (not bench.aborted)
          (set! test.status {:count bench.count}))))

    (bench.on "complete"
      #($scope.apply
        #(do
          (set! test.running false
                test.status null
                $scope.testsRunning false)

          (if bench.aborted
            (set! test.error bench.error.message)
            (do
              (set! test.stats bench.stats
                    test.stats.hz (/ 1 bench.stats.mean)
                    $scope.top_hz ($scope.findFastest))))

          (if cb (cb)))))

    (bench.run {:async true}))

  (setfn! $scope.findFastest []
    (var max 0)
    ($scope.tests.forEach (fn [test]
      (if (and test.stats (> test.stats.hz max))
        (set! max test.stats.hz))))
    max)

  (setfn! $scope.runTests []
    (var i 0)
    (varfn runNextCase []
      (set! i (+ i 1))
      ($scope.runTest $scope.tests[(- i 1)] runNextCase))
    (runNextCase))

  (setfn! $scope.removeTest [test]
    (var idx $scope.tests.indexOf(test))
    (if (xor idx)
      ($scope.tests.splice idx 1)))

  )
