(def Enumerable {:EOF {}})

(defprotocol IEnumerable
  (enumerate [me]
    (let [keys (Object.keys me)
          i (- 0 1)
          current #([(get keys i) (get me (get keys i))])
          go-next #(if (< (+ i 1) keys.length) (set! i (+ i 1)) Enumerable.EOF)]
      {:current current
       :next #(if (== (go-next) Enumerable.EOF) Enumerable.EOF (current))})))

(extend-type Array IEnumerable
  (enumerate [me]
    (let [i (- 0 1)
          current #(get me i)
          go-next #(if (< (+ i 1) me.length) (set! i (+ i 1)) Enumerable.EOF)]
      {:current current
       :next #(if (== (go-next) Enumerable.EOF) Enumerable.EOF (current))})))

(defn map [f & vars]
  (loop [enumerables (vars.map enumerate)
         results []]
    (let [vs (enumerables.map (fn [e] (e.next)))]
      (if (xor (vs.indexOf Enumerable.EOF))
        results
        (do (results.push (f.apply nil vs))
            (recur))))))

; (print (map #(+ %1 %2 %3) [1 2 3] [4 5 6] [7 8 9]))
