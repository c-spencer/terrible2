(ns terrible.core.extras)

(defprotocol Equality
  (= [left right]
    (== left right)))

; Avoid extra dispatch for not=
(defn not= [left right]
  (not (= left right)))

(extend-type Keyword Equality
  (= [left right]
    (and (keyword? right)
         (== left.name right.name))))

(extend-type Symbol Equality
  (= [left right]
    (and (symbol? right)
         (== left.name right.name))))

(defprotocol Iterable
  (map [obj func]
    (let [new-obj {}]
      (js-for-in k obj
        (if (obj.hasOwnProperty k)
          (set! (get new-obj k) (func (get obj k) k))))
      new-obj))
  (each [obj func]
    (js-for-in k obj
      (if (obj.hasOwnProperty k)
        (func (get obj k) k)))
    nil))

(extend-type Array Iterable
  (map [arr func] (arr.map func))
  (each [arr func] (arr.forEach func)))

(extend-type List Iterable
  (map [this-list func] (.concat (list) (this-list.values.map func)))
  (each [this-list func] (this-list.values.forEach func)))

(defprotocol Printable
  (print-str [obj]
    (cond
      (object? obj) (let [parts []]
                      (each obj (fn [v k]
                        (parts.push (print-str k))
                        (parts.push (print-str v))))
                      (+ "{" (parts.join " ") "}"))
      :else         (JSON.stringify obj))))

(extend-type Array Printable
  (print-str [arr]
    (+ "[" (.join (map arr print-str) " ") "]")))

(extend-type List Printable
  (print-str [list]
    (+ "(" (.values.join (map list print-str) " ") ")")))

(extend-type Keyword Printable
  (print-str [kw]
    (+ ":" kw.name)))

(extend-type Symbol Printable
  (print-str [symb] symb.name))

(extend-type Function Printable
  (print-str [f]
    (+ "#fn[" f.name "]")))
